" Automatic reloading of .vimrc
au! bufwritepost .vimrc source %
"-------------------------------------------------------------------------------
" Plugins
"-------------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
" -- plugins
" bufferline, lightline, icons
Plug 'bling/vim-bufferline'
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'

" git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" distraction free
Plug 'junegunn/goyo.vim', {'on': 'Goyo'}

" nerdtree (+git)
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'Xuyuanp/nerdtree-git-plugin', {'on': 'NERDTreeToggle'}

" tagbar
Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}

" fileencodings & language plugins
Plug 's3rvac/AutoFenc'
Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'Rykka/riv.vim', {'for': 'rst'}
Plug 'tpope/vim-markdown', {'for': 'markdown'}
Plug 'zah/nim.vim', {'for': 'nim'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'jimenezrick/vimerl', {'for': 'erlang'}
Plug 'lervag/vimtex', {'for': 'tex'}

" fold, complete, buffers, search
Plug 'tmhedberg/SimpylFold'
Plug 'ervandew/supertab'
Plug 'Shougo/unite.vim'

" syntax check..
Plug 'scrooloose/syntastic'
Plug 'nvie/vim-flake8', {'for': 'python'}

" -- color
" molokai
Plug 'tomasr/molokai'
" solarized
Plug 'altercation/vim-colors-solarized'
" summerfruit256
Plug 'vim-scripts/summerfruit256.vim'
" wombat256mod
Plug 'vim-scripts/wombat256.vim'
" wombat256i
Plug 'dsolstad/vim-wombat256i'
" apprentice
Plug 'romainl/Apprentice'

call plug#end()
"-------------------------------------------------------------------------------
" Set encoding to utf-8
"-------------------------------------------------------------------------------
set encoding=utf-8
"-------------------------------------------------------------------------------
" Toggle paste - turns on/off autoindenting etc.
"-------------------------------------------------------------------------------
set pastetoggle=<F2>
"-------------------------------------------------------------------------------
" Turn off paste mode when leaving insert
"-------------------------------------------------------------------------------
au InsertLeave * set nopaste
"-------------------------------------------------------------------------------
" Select a default copy&paste register
" * is selection ~ unnamed
" + is clipboard ~ unnamedplus
"-------------------------------------------------------------------------------
if has("win32")
    set clipboard=unnamed
else
    set clipboard=unnamedplus
endif
"-------------------------------------------------------------------------------
" Mouse & Backspace
"-------------------------------------------------------------------------------
set mouse=a
set bs=2
"-------------------------------------------------------------------------------
" Brackets & scrolling
"-------------------------------------------------------------------------------
set sm " Shortly jump to matching bracket
set so=4 " scrolloff (lines of context during scrolling)
"-------------------------------------------------------------------------------
" <Leader> key
"-------------------------------------------------------------------------------
let mapleader=","
"-------------------------------------------------------------------------------
" Learn to move..
"-------------------------------------------------------------------------------
nnoremap <Left> :echoe "Use h"<CR>
vnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
vnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
vnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
vnoremap <Down> :echoe "Use j"<CR>
"-------------------------------------------------------------------------------
" faster split resize
"-------------------------------------------------------------------------------
map <Leader>+ <esc>:vertical resize +5<CR>
map <Leader>- <esc>:vertical resize -5<CR>
"-------------------------------------------------------------------------------
" new split below/right of current
"-------------------------------------------------------------------------------
set splitbelow
set splitright
"-------------------------------------------------------------------------------
" easier buffer switching
"-------------------------------------------------------------------------------
map <Leader>n <esc>:bprevious<CR>
map <Leader>m <esc>:bnext<CR>
"-------------------------------------------------------------------------------
" open new (empty) buffer
"-------------------------------------------------------------------------------
map <Leader>a <esc>:enew<CR>
"-------------------------------------------------------------------------------
" open new vertical split
"-------------------------------------------------------------------------------
map <Leader>v <esc>:vnew<CR>
"-------------------------------------------------------------------------------
" close current file, but keep buffers intact
"-------------------------------------------------------------------------------
map <Leader>x <esc>:bp\|bd #<CR>
"-------------------------------------------------------------------------------
" change directory to that of current file
"-------------------------------------------------------------------------------
map <Leader>cd :cd %:p:h<CR>
"-------------------------------------------------------------------------------
" map sort to a key
"-------------------------------------------------------------------------------
vnoremap <Leader>s :sort<CR>
"-------------------------------------------------------------------------------
" easier moving of code blocks
"-------------------------------------------------------------------------------
vnoremap < <gv
vnoremap > >gv
"-------------------------------------------------------------------------------
" Make search case insensitive
"-------------------------------------------------------------------------------
set hlsearch
set incsearch
set ignorecase
set smartcase
"-------------------------------------------------------------------------------
" Automatically insert \v when searching, for sensible regex matching.
"-------------------------------------------------------------------------------
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v
"-------------------------------------------------------------------------------
" Keep search matches in the middle of the screen, and pulse the line when moving
"-------------------------------------------------------------------------------
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
"-------------------------------------------------------------------------------
" Clear search highlight
"-------------------------------------------------------------------------------
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
inoremap <C-n> <esc>:nohl<CR>
"-------------------------------------------------------------------------------
" Highlight multiple spaces and trailing whitespace
"-------------------------------------------------------------------------------
set listchars=tab:\|\ ,trail:Â·
set list
highlight Whitespace cterm=underline gui=underline ctermfg=yellow guifg=yellow
au ColorScheme * highlight Whitespace cterm=underline gui=underline ctermfg=yellow guifg=yellow
au BufWinEnter * call matchadd('Whitespace', '  \+\($\)\@!', -1)
" highlight trailing whitespace
au BufWinEnter * call matchadd('ErrorMsg', '\s\+$', -1)
"-------------------------------------------------------------------------------
" Set color scheme
"-------------------------------------------------------------------------------
set t_Co=256
" colorscheme apprentice
colorscheme wombat256i
"-------------------------------------------------------------------------------
" Enable syntax highlighting
"-------------------------------------------------------------------------------
filetype off
filetype plugin indent on
syntax on
"-------------------------------------------------------------------------------
" (relative) line numbers
"-------------------------------------------------------------------------------
au InsertEnter * set number norelativenumber
au InsertLeave * set number relativenumber
set number relativenumber
"-------------------------------------------------------------------------------
" 80 cols, wrap, ..
"-------------------------------------------------------------------------------
set tw=80
set wrap
set linebreak
set fo-=t
set colorcolumn=+1
highlight ColorColumn ctermbg=236
"-------------------------------------------------------------------------------
" Useful settings
"-------------------------------------------------------------------------------
set history=1000
set undolevels=1000
"-------------------------------------------------------------------------------
" Don't use TABs but 4 spaces (except for xml, see below..)
"-------------------------------------------------------------------------------
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
"-------------------------------------------------------------------------------
" Indent new lines
"-------------------------------------------------------------------------------
set autoindent
"-------------------------------------------------------------------------------
" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
"-------------------------------------------------------------------------------
set nobackup
set nowritebackup
set noswapfile
"-------------------------------------------------------------------------------
" Filetype mappings..
"-------------------------------------------------------------------------------
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.config set filetype=xml
au BufNewFile,BufRead *.conf set filetype=config
au BufNewFile,BufRead *.geojson set filetype=json
"-------------------------------------------------------------------------------
" Folding..
"-------------------------------------------------------------------------------
nnoremap <Leader>f za
vnoremap <Leader>f zf
au FileType python setl fen foldmethod=indent foldlevelstart=0 foldnestmax=3
au FileType json,c,cpp setl fen foldmethod=syntax foldlevelstart=2
" slow for big files..
" let g:xml_syntax_folding=1
" au FileType xml setl fen foldmethod=syntax foldlevelstart=1
au FileType xml setl fen foldmethod=indent foldlevelstart=1 sw=2
"-------------------------------------------------------------------------------
" lightline
"-------------------------------------------------------------------------------
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'fugitive', 'filename' ],
    \             [ 'modified', 'bufferline' ] ],
    \   'right': [ [ 'lineinfo' ], [ 'percent'],
    \              [ 'fileformat', 'fileencoding', 'filetype', 'syntastic' ] ]
    \ },
    \ 'component': {
    \   'fugitive': '%{exists("*fugitive#head")?"î  ".fugitive#head():""}',
    \   'readonly': '%{&filetype=="help"?"":&readonly?"î¢":""}',
    \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
    \   'bufferline': '%{bufferline#refresh_status()}%{g:bufferline_status_info.before . g:bufferline_status_info.current . g:bufferline_status_info.after}'
    \ },
    \ 'component_expand': {
    \     'syntastic': 'SyntasticStatuslineFlag',
    \ },
    \ 'component_type': {
    \     'syntastic': 'middle',
    \ },
    \ 'component_visible_condition': {
    \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())',
    \   'readonly': '(&filetype!="help"&& &readonly)',
    \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
    \ },
    \ 'component_function': {
    \   'filetype': 'TypeIcon',
    \   'fileformat': 'FormatIcon'
    \ },
    \ 'separator': { 'left': 'î°', 'right': 'î²' },
    \ 'subseparator': { 'left': 'î±', 'right': 'î³' }
    \ }

function! TypeIcon()
    return winwidth(0) < 70 ? '' : (strlen(&filetype) ? &filetype . ' ' .
                \ WebDevIconsGetFileTypeSymbol() : 'no ft')
endfunction

function! FormatIcon()
    return winwidth(0) < 70 ? '' : (&fileformat . ' ' .
                \ WebDevIconsGetFileFormatSymbol())
endfunction

set laststatus=2
"-------------------------------------------------------------------------------
" silence bufferline - lightline will display its content
"-------------------------------------------------------------------------------
let g:bufferline_echo = 0
"-------------------------------------------------------------------------------
" running stuff ~> format/lint/whatever/..
"-------------------------------------------------------------------------------
au FileType json map <buffer> <F3> :%!python -m json.tool<CR>
au FileType nim map <buffer> <Leader>c :!nim c %<CR>
au FileType nim map <buffer> <F3> :!nim c -r %<CR>
au FileType python map <buffer> <F3> :call Flake8()<CR>
au FileType xml map <buffer> <F3> :%!xmllint --format --recover -<CR>
au FileType html map <buffer> <F3> :!tidy -q -mi --show-errors 0 --wrap 0 %<CR>
nnoremap <F5> :!make<CR>
"-------------------------------------------------------------------------------
" goyo.vim
"-------------------------------------------------------------------------------
nnoremap <Leader><Space> :Goyo<CR>
let g:goyo_width = 120
let g:goyo_linenr = 0
"-------------------------------------------------------------------------------
" Tagbar
"-------------------------------------------------------------------------------
nmap <F8> :TagbarToggle<CR>
"-------------------------------------------------------------------------------
" Tagbar for objective c
"-------------------------------------------------------------------------------
let g:tagbar_type_objc = {
    \  'ctagstype': 'objc'
    \, 'ctagsargs': [
    \   '--options='.expand('~/.vim/extras/ctags-options-objc')
    \,  '--objc-kinds=-N'
    \,  '--format=2'
    \,  '--excmd=pattern'
    \,  '--extra='
    \,  '--fields=nksaSmte'
    \,  '-f -'
    \]
    \, 'kinds': [
    \     'i:class interface'
    \,    'x:class extension'
    \,    'I:class implementation'
    \,    'P:protocol'
    \,    'M:method'
    \,    't:typedef'
    \,    'v:variable'
    \,    'p:property'
    \,    'e:enumeration'
    \,    'f:function'
    \,    'd:macro'
    \,    'g:pragma'
    \,    'c:constant'
    \, ]
    \, 'sro': ' '
    \}
"-------------------------------------------------------------------------------
" Syntastic
"-------------------------------------------------------------------------------
let g:syntastic_python_python_exec = '~/opt/bin/python3'
"-------------------------------------------------------------------------------
" NERDTree
"-------------------------------------------------------------------------------
map <Leader>e :NERDTreeToggle<CR>
"-------------------------------------------------------------------------------
" NERDTree GitPlugin & WebDevIcons
"-------------------------------------------------------------------------------
let g:WebDevIconsNerdTreeGitPluginForceVAlign=1
"-------------------------------------------------------------------------------
" Unite
"-------------------------------------------------------------------------------
map <Leader>b :Unite buffer<CR>
map <Leader>r :Unite file_rec<CR>
