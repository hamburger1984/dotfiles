" Automatic reloading of .vimrc
au! bufwritepost .vimrc source %

" Better paste
set pastetoggle=<F2>

" Select a default copy&paste register
" * is selection ~ unnamed, + is clipboard ~ unnamedplus
if has("win32")
    set clipboard=unnamed
else
    set clipboard=unnamedplus
endif

" Mouse & Backspace
set mouse=a
set bs=2

set sm " Shortly jump to matching bracket
set so=4 " scrolloff (lines of context during scrolling)

" <Leader> key
let mapleader=","

" Learn to move..
nnoremap <Left> :echoe "Use h"<CR>
vnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
vnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
vnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
vnoremap <Down> :echoe "Use j"<CR>

" nohl
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
inoremap <C-n> <esc>:nohl<CR>

" faster split resize
map <Leader>+ <esc>:vertical resize +5<CR>
map <Leader>- <esc>:vertical resize -5<CR>

" new split below/right of current
set splitbelow
set splitright

" easier buffer switching
map <Leader>n <esc>:bprevious<CR>
map <Leader>m <esc>:bnext<CR>

" open new (empty) buffer
map <Leader>a <esc>:enew<CR>

" open new vertical split
map <Leader>v <esc>:vnew<CR>

" close current file, but keep buffers intact
map <Leader>x <esc>:bp\|bd #<CR>

" change directory to that of current file
map <Leader>cd :cd %:p:h<CR>

" map sort to a key
vnoremap <Leader>s :sort<CR>

" easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" Whitespaces...
set listchars=tab:\|\ ,trail:Â·
set list
highlight Whitespace cterm=underline gui=underline ctermfg=yellow guifg=yellow
au ColorScheme * highlight Whitespace cterm=underline gui=underline ctermfg=yellow guifg=yellow
au BufWinEnter * call matchadd('Whitespace', '  \+\($\)\@!', -1)
" highlight trailing whitespace
au BufWinEnter * call matchadd('ErrorMsg', '\s\+$', -1)

" Color scheme
set t_Co=256
color wombat256mod

" Enable syntax highlighting
filetype off
filetype plugin indent on
syntax on

" (relative) line numbers and length
au InsertEnter * set number norelativenumber
au InsertLeave * set number relativenumber
set number relativenumber

" 80 cols, wrap, ..
set tw=80
set wrap
set linebreak
set fo-=t
set colorcolumn=+1
highlight ColorColumn ctermbg=236

" Useful settings
set history=700
set undolevels=700

" Don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Indent new lines
set autoindent

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Filetype mappings..
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.config set filetype=xml
au BufNewFile,BufRead *.conf set filetype=config

" Folding..
nnoremap <Leader>f za
vnoremap <Leader>f zf
au FileType python setl fen foldmethod=indent foldlevelstart=0 foldnestmax=2
au FileType json,c,cpp,xml setl fen foldmethod=syntax foldlevelstart=2

" ============================================================================
" Setup Pathogen
call pathogen#infect()
" ============================================================================

" vim-airline
let g:airline#extensions#tabline#enabled=1
if !has("win32")
    let g:airline_powerline_fonts=1
endif
set laststatus=2

" running stuff ~> format/lint/whatever/..
au FileType json map <buffer> <F3> :%!python -m json.tool<CR>
au FileType xml map <buffer> <F3> :%!xmllint --format --recover -<CR>
" vim-flake8
au FileType python map <buffer> <F3> :call Flake8()<CR>

" run make
nnoremap <F5> :!make<CR>

" goyo.vim
nnoremap <Leader><Space> :Goyo<CR>
let g:goyo_width = 120
let g:goyo_linenr = 0

" Tagbar
nmap <F8> :TagbarToggle<CR>

" Syntastic
let g:syntastic_python_python_exec = '~/opt/bin/python3'

" NERDTree
map <Leader>e :NERDTreeToggle<CR>

" Unite
map <Leader>b :Unite buffer<CR>
map <Leader>r :Unite file_rec<CR>
